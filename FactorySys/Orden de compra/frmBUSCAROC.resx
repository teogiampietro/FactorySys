<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEACACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAATk5OAFJSUgBVVVUAWlpaAF1dXQBiYmIAZmZmAGtrawBubm4AcXFxAHR0dAB5eXkAfX19AOqq
        WQDtrl0A77BdAO+zYwDrsGUA5rBvAO20agDvuG8A9bxqAPK6bQD1wHIA+MZ6APrKfwD7zX8AgYGBAISE
        hACJiYkAjY2NAJGRkQCWlpYAmZmZAJ6engChoaEApaWlAKmpqQCurq4AsbGxALSzswC0tLQAuLe3ALm5
        uQC9u7sAvr29AOK4hQDivZAAwL6+APLBgAD6y4EA/M+HAP/VhgD90okA/dWKAP3VjgD/2o8A6MKRAO7H
        kwDxyZEA882VAPjOkAD+1pEA+NKXAPvUlQD+2pQA/96VAPjRmgD/25gA/92ZAPzZnwD/4ZwA18KuANnG
        sQDUx70A2su8AOLFogDnzKoA/d2mAPLVrAD42agA+92sAPzerQD437cA/+KiAP/kogD/4aUA/+amAP/m
        qQD/56wA/+ipAP/prQD/5rIA/OG3AP/psAD/7LEA/+i1AP/utQD64roA/+e5AP3kvQD/6bgA/+m+AP/w
        twD/8LgA//K8AMHAwADFxMQAyMXFAMnJyQDOyckAzs7OANPKxQDVzMcA0MvLANHMzADUz88A2tLNANHR
        0QDW0tIA1dXVANzV0ADZ1dUA39jTANnZ2QDe2toA3t3dAOXVwgDn2MUA6tvIAOHd3QD45MUA/+rAAP/r
        xQD/7McA/+vIAP/syAD/7c8A7eLVAOrh2ADx5NIA/+7RAP/w0wD/8twA4uHhAOTh4QDp5uYA6unpAOzq
        6gDu7OwA9u3gAPDr5wDy7uoA9fDsAP/26ADx8PAA9PLyAPb19QD///8AAAAAAC8DAABQBAAAcAYAAJAJ
        AACwCgAAzwwAAPAOAAD/IBIA/z4xAP9cUQD/enEA/5eRAP+2sQD/1NEA////AAAAAAAvAA4AUAAXAHAA
        IQCQACsAsAA2AM8AQADwAEkA/xFaAP8xcAD/UYYA/3GcAP+RsgD/scgA/9HfAP///wAAAAAALwAgAFAA
        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
        P//8AH///wH/////////////
</value>
  </data>
</root>